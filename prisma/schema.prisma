// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// npx commands for Prisma:
// npx prisma studio --preview-feature
// npx prisma format --preview-feature
// npx prisma migrate dev --name init --preview-feature
// npx prisma db seed --preview-feature
// npx prisma migrate deploy --preview-feature
// npx prisma migrate reset --preview-feature

// Some dbs will allow you to turn on the ability 
// to have an error thrown if you make a query that's not index


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  email     String    @unique
  firstName String
  lastName  String
  password  String
  projects  Project[]
  tasks     Task[]
}

model Project {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  name        String
  ownerId     String
  owner       User      @relation(fields: [ownerId], references: [id])

  description String?
  due         DateTime?
  deleted     Boolean   @default(false)
  tasks       Task[]

  @@unique([ownerId, name])
  @@index([ownerId, id])
}

enum TASK_STATUS {
  NOT_STARTED
  STARTED
  COMPLETED
}

model Task {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  status      TASK_STATUS @default(NOT_STARTED)
  name        String

  ownerId     String
  owner       User        @relation(fields: [ownerId], references: [id])
  projectId   String
  project     Project     @relation(fields: [projectId], references: [id])

  description String?
  due         DateTime?
  deleted     Boolean     @default(false)

  @@index([ownerId])
}
